* Initialize packages
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives
             '("melpa-stable" . "http://stable.melpa.org/packages/") t)

(package-initialize)
#+END_SRC

* Bootstrap use-package
#+BEGIN_SRC emacs-lisp :tangle yes
 (unless (package-installed-p 'use-package)
   (package-refresh-contents)
   (package-install 'use-package))
#+END_SRC

* Personal details
#+BEGIN_SRC emacs-lisp :tangle yes
(setq user-full-name "Jake Rios")
(setq user-mail-address "rios.jacob@gmail.com")
#+END_SRC

* Emacs initialization
- Turn off the splash screen
- Set the scratch buffer to an empty message
- Turn on org-mode as the major mode
#+BEGIN_SRC emacs-lisp :tangle yes
(setq inhibit-splash-screen t)
(setq initial-scratch-message nil)
(setq initial-major-mode 'org-mode)
#+END_SRC

* User interface
** Reset UI defaults
- Turn off the scroll bar, tool bar, and menu bar
- Set the window default frame size to 155x50
- Turn on column numbers in information buffer
- Set tab width to 2 characters
- Turn off tabs in order to use spaces instead
#+BEGIN_SRC emacs-lisp :tangle yes
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(when window-system (set-frame-size (selected-frame) 155 50))
(setq column-number-mode t)
(setq default-tab-width 2)
(setq tab-width 2)
(setq-default indent-tabs-mode nil)
#+END_SRC

** Fonts
#+BEGIN_SRC emacs-lisp :tangle yes
; make up for the fact that windows and mac display heights differently
(defun system-font-height()
  (cond ((memq window-system '(mac ns)) (+ 180))
        ((memq window-system '(w32))  (+ 125))))

(set-face-attribute 'default nil
  :font "Inconsolata"
  :height (system-font-height))
#+END_SRC

* User experience tweaks
- Just use 'y' or 'n' for answers because who wants to type "yes" or "no"
- Highlight matching parens
- Do not make backup files
- Do not display dialog boxes, use the mini buffer for confirmations
- Flash the frame to represent a bell

** Make highlighting work as it does in other editors
- Replace selections when typing with selected text
- Highlight selections when using mark mode
- Use clipboard for cut and paste

#+BEGIN_SRC emacs-lisp :tangle yes
(defalias 'yes-or-no-p 'y-or-n-p)
(show-paren-mode t)
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq use-dialog-box nil)
(setq visible-bell nil)
(delete-selection-mode t)
(transient-mark-mode t)
(setq select-enable-clipboard t)
#+END_SRC

* Programming minor modes
- Turn on line numbers when in a programming mode
#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'prog-mode-hook (lambda()
  (linum-mode t)))
#+END_SRC

** Whitespace
- Display whitespace in a cleaner way by removing the $ from the end of lines
- Cleanup unnecessary whitespace before saving files
#+BEGIN_SRC emacs-lisp :tangle yes
(setq whitespace-display-mappings
   '((space-mark 32 [183] [46])
    (space-mark 160 [164] [95])
    (tab-mark 9 [187 9] [92 9])))

(add-hook 'before-save-hook (lambda()
  (whitespace-cleanup)))
#+END_SRC

* Themes
I really like [[https://github.com/arcticicestudio/nord][nord color scheme]]. Ensure it's installed, set, and loaded.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package nord-theme
  :ensure t
  :init
  (setq nord-theme t)
  :config
  (load-theme 'nord t))
#+END_SRC

* Web Mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package web-mode
  :mode ("\\.js$" . web-mode)
  :config
  (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'")))
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
)

#+END_SRC
* Javascript

** js2-mode
- Set the indent level to 2 spaces
- Add keyboard shortcut to toggle on web-mode from js2-mode
  This is so that editing JavaScript and JSX works ok
#+BEGIN_SRC emacs-lisp
(use-package js2-mode-mode
  :mode ("\\.js\\'" . js2-mode)
  :bind ("C-c jsx" . js2-jsx-mode)
  :config
  (setq-default js2-basic-offset 2))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(setq javascript-indent-level 2)
#+END_SRC

#+END_SRC

* Magit
- Set global keyboard binding for loading the magit-status buffer
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package magit
  :ensure t
  :init
    (global-set-key (kbd "C-x g") 'magit-status))
#+END_SRC

* Ledger mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ledger-mode
  :ensure t
  :mode ("\\.dat$" . ledger-mode)
  :config
  (setq ledger-binary-path "/usr/local/bin/ledger"))
#+END_SRC
* Personal packages
** SSH Agency
   Turn on ssh-agency so that it will use the ssh-agent in windows. This helps to make sure pushing to git remotes will work when on windows.
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/personal")
(load "ssh-agency")
#+END_SRC

* Others
#+BEGIN_SRC emacs-lisp
;; Set path to include Shell path
;(when (memq window-system '(mac ns))
;  (use-package exec-path-from-shell
;    :config
;    (exec-path-from-shell-initialize)
;  ))
#+END_SRC
